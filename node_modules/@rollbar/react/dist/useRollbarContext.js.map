{"version":3,"file":"useRollbarContext.js","sources":["../src/hooks/use-rollbar-context.js"],"sourcesContent":["'use client';\n\nimport invariant from 'tiny-invariant';\nimport { useEffect, useLayoutEffect } from 'react';\nimport { useRollbar } from './use-rollbar';\n\n// Simple version does its job\n// export function useRollbarContext(context) {\n//   useRollbarConfiguration({ payload: { context }});\n// }\n\n// Complex version will set the context when part of the tree and reset back to original context when removed\nexport function useRollbarContext(ctx = '', isLayout = false) {\n  invariant(typeof ctx === 'string', '`ctx` must be a string');\n  const rollbar = useRollbar();\n  (isLayout ? useLayoutEffect : useEffect)(() => {\n    const origCtx = rollbar.options.payload.context;\n    rollbar.configure({ payload: { context: ctx } });\n    return () => {\n      rollbar.configure({ payload: { context: origCtx } });\n    };\n  }, [ctx]);\n}\n"],"names":["invariant","payload","context"],"mappings":";;;;;AAMA;AACA;AACA;AACA;;AAEA;AACO;AAAuD;AAApB;AACxCA;AACA;AACA;;;AAEsBC;AAAWC;AAAa;AAAE;AAC9C;;AACsBD;AAAWC;AAAiB;AAAE;;AAEtD;AACF;;"}