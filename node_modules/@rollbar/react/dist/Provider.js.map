{"version":3,"file":"Provider.js","sources":["../src/provider.js"],"sourcesContent":["'use client';\n\nimport React, { Component, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Rollbar from 'rollbar';\nimport invariant from 'tiny-invariant';\nimport { isRollbarInstance } from './utils';\n\nexport const Context = createContext();\nContext.displayName = 'Rollbar';\n\nexport const RollbarInstance = Symbol('RollbarInstance');\nexport const BaseOptions = Symbol('BaseOptions');\nexport const RollbarCtor = Symbol('RollbarCtor');\n\nexport function getRollbarFromContext(context) {\n  const { [RollbarInstance]: rollbar } = context;\n  return rollbar;\n}\n\nexport function getRollbarConstructorFromContext(context) {\n  const { [RollbarCtor]: ctor } = context;\n  return ctor;\n}\n\nexport class Provider extends Component {\n  static propTypes = {\n    Rollbar: PropTypes.func,\n    config: (props, propName, componentName) => {\n      if (!props.config && !props.instance) {\n        return new Error(\n          `One of the required props 'config' or 'instance' must be set for ${componentName}.`,\n        );\n      }\n      if (props.config) {\n        const configType = typeof props.config;\n        if (\n          configType === 'function' ||\n          (configType === 'object' && !Array.isArray(configType))\n        ) {\n          return;\n        }\n        return new Error(`${propName} must be either an Object or a Function`);\n      }\n    },\n    instance: (props, propName, componentName) => {\n      if (!props.config && !props.instance) {\n        return new Error(\n          `One of the required props 'config' or 'instance' must be set for ${componentName}.`,\n        );\n      }\n      if (props.instance && !isRollbarInstance(props.instance)) {\n        return new Error(\n          `${propName} must be a configured instance of Rollbar`,\n        );\n      }\n    },\n    children: PropTypes.node,\n  };\n\n  constructor(props) {\n    super(props);\n    const { config, Rollbar: ctor = Rollbar, instance } = this.props;\n    invariant(\n      !instance || isRollbarInstance(instance),\n      '`instance` must be a configured instance of Rollbar',\n    );\n    const options = typeof config === 'function' ? config() : config;\n    const rollbar = instance || new ctor(options);\n    // TODO: use isUncaught to filter if this is 2nd Provider added\n    // unless customer wants that\n    this.state = { rollbar, options };\n  }\n\n  // componentDidUpdate()\n\n  render() {\n    const { children, Rollbar: ctor = Rollbar } = this.props;\n    const { rollbar, options } = this.state;\n\n    return (\n      <Context.Provider\n        value={{\n          [RollbarInstance]: rollbar,\n          [BaseOptions]: options,\n          [RollbarCtor]: ctor,\n        }}\n      >\n        {children}\n      </Context.Provider>\n    );\n  }\n}\n"],"names":["Context","Provider","_classCallCheck","_this","ctor","rollbar","options","_createClass","value","_defineProperty"],"mappings":";;;;;;;;AAQaA;AACbA;;;;AAMO;AACL;AACA;AACF;AAEO;AACL;AACA;AACF;AAEaC;;;AAmCQ;AAAAC;AACjBC;AACA;;;AAAyBC;;;;;AAOzB;AACA;;AACeC;AAASC;;AAAU;AACpC;;AAEA;AAAAC;;;AAGE;;;AAA2BH;AAC3B;;;AAEA;AAEII;AAIE;AAKR;AAAC;AAAA;AAAA;AACFC;;;;AA9DO;AAGF;;AAEE;AACA;AAIE;AACF;AACA;AACF;;;;AAIE;AAGF;;AAEE;AAGF;;;AAGJ;;"}